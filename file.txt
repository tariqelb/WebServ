/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   checkConfigdata.cpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/28 21:03:29 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/04/03 00:54:05 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"

int	DuplicatePort(std::string listen, std::vector<std::string> port)
{
	int j;
	int p_size;
	int l_size;

	j = 0;
	p_size = port.size();
	while (j < p_size)
	{
		if (listen == port[j])
			return (1);
			j++;
	}
	return (0);
}

int	valideListenDirective(std::vector<std::string>& listen, std::vector<std::string>& port)
{
	int 								i;
	int 								size;
	std::vector<std::string>::iterator	it;

	// remove duplication of a port in a single server
	i = 0;
	size = listen.size();
	it = listen.begin();
	while (i < size)
	{
		int j = i + 1;
		while (j < size)
		{
			if (listen[i] == listen[j])
			{
				listen.erase(it + i);
				size = listen.size();
				i = 0;
				break;
			}
			else
				j++;
		}
		i++;
	}


	//check if a port number is valide else remove it from the server 
	//and check if each server have diferent otherwise remove this server
	//if remove duplication and unvalid ports lead to empty listen directive 
	//mean no port remain in that particulare server we remove that server
	size = listen.size();
	it = listen.begin();
	if (size == 0)
		return (1);
	i = 0;
	while (i < size)
	{
		if (validePort(listen[i]))   
		{
			if (DuplicatePort(listen[i], port) == 1)
				return (1);
			port.push_back(listen[i]);
			i++;
		}
		else
		{
			listen.erase(it + i);
			size = listen.size();
		}
	}
	if (size == 0)
		return (1);
	return (0);
}

int	checkConfigData(struct webserv& web)
{
	int 									i;
	int 									size;
	int 									vld;
	std::vector<std::string> 				port;
	std::vector<struct serverfile>::iterator it;

	i = 0;
	vld = 0;
	it = web.config.begin();
	size = web.config.size();
	while (i < size)
	{
		if (valideListenDirective(web.config[i].listen, port))
		{
			web.config.erase(it + i);
			it = web.config.begin();
			size = web.config.size();
		}
		else 
			i++;
	}
	//displayServerFile(web.config);
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   displayServerFile.cpp                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/28 20:35:32 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/29 00:52:48 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"

void	displayServerFile(std::vector<struct serverfile> conf)
{
	int i;

	i = 0;
	while (i < conf.size())
	{
		std::cout << "************************************************************" << std::endl;
		{
			int j = 0;
			while (j < conf[i].listen.size())
			{
				std::cout << "listen : " << conf[i].listen[j] << std::endl;
				j++;
			}
		}
		{
			int j = 0;
			while (j < conf[i].server_name.size())
			{
				std::cout << "servername : " << conf[i].server_name[j] << std::endl;
				j++;
			}
		}
		{
			int j = 0;
			while (j < conf[i].error_page.size())
			{
			std::cout << "error_code: " << conf[i].error_page[j].first;
			std::cout << " error_page: " << conf[i].error_page[j].second;
			std::cout << std::endl;
				j++;
			}
		}
		std::cout << "Max Body Size : " << conf[i].max_body_size << "\n";
		std::cout << "Root : " << conf[i].root << std::endl;
		std::cout << "Index : " << conf[i].index << std::endl;
		{
			int j = 0;
			while (j < conf[i].location.size())
			{
				std::cout << "-------------------" << "\n" << "Location : " << std::endl;
				std::cout << "pattern : " << conf[i].location[j].pattern << std::endl;
				std::cout << "root : " << conf[i].location[j].root << std::endl;
				std::cout << "index : " << conf[i].location[j].index << std::endl;
				std::cout << "autoindex : " << conf[i].location[j].autoindex << std::endl;
				std::cout << "upload : " << conf[i].location[j].upload << std::endl;
				std::cout << "upload_store : " << conf[i].location[j].upload_store << std::endl;
				std::cout << "cgi : " << conf[i].location[j].cgi_ext << std::endl;
				std::cout << "cgi_path : " << conf[i].location[j].cgi_path << std::endl;
				int k = 0;
				while (k < conf[i].location[j].error_page.size())
				{
					std::cout << "error code : " << conf[i].location[j].error_page[k].first << std::endl;
					std::cout << "error file : " << conf[i].location[j].error_page[k].second << std::endl;
					k++;
				}
				k = 0;
				while (k < conf[i].location[j].allow.size())
				{
					std::cout << "allow : " << conf[i].location[j].allow[k] << "\n";
					k++;
				}
				j++;
			}
		}
		std::cout << "-------------------" << std::endl;
		i++;
	}
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   getConfigData.cpp                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/19 17:44:50 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/04/03 00:51:31 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"
char directives[14][21] = {"listen", "servername", "error_page", "client_max_body_size", "location"    , "allow", "root", "autoindex", "index", "upload", "upload_store", "cgi", "script_filename"};

std::string	getDirectiveKey(std::string line)
{
	int i;
	int size;
	int pos;
	int len;

	size = line.size();
	pos = 0;
	len = 0;
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	pos = i;
	while (i < size && line[i] != ' ' && line[i] != '\t')
	{
		i++;
		len++;
	}
	return (line.substr(pos, len));
}

int	nbrOfServerBlock(std::vector<std::string> file)
{
	int i;
	int size;
	int count;

	count = 0;
	size = file.size();
	while (i < size)
	{
		if (isServerBlock(file[i]))
			count++;
		i++;
	}
	return (count);
}

void	getKeyandValue(std::string& key, std::string& value, std::string line)
{
	int			size;
	int			i;
	int			j;
	int			k;

	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size  && line[i + j] != ' ' && line[i + j] != '\t')
		j++;
	if (j)
		key = line.substr(i, j);
	i = i + j;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = size - 1;
	while (j > 0 && (line[j] == ' ' || line[j] == '\t' || line[j] == ';'))
		--j;
	if (j >= i)
		value = line.substr(i, j - i + 1);
}


void	getMultivalue(std::vector<std::string>& holder, std::string values)
{
	int i;
	int j;
	int size;
	int index;

	index = 0;
	size = values.size();
	i = 0;
	while (i < size)
	{
		while (i < size && (values[i] == ' ' || values[i] == '\t'))
			i++;
		j = 0;
		while (i + j < size  && values[i + j] != ' ' && values[i + j] != '\t')
			j++;
		if (j)
		{
			holder.push_back(values.substr(i , j));
			values.assign(values.substr(i + j, size - (i + j)));
			size = values.size();
			i = 0;
		}
	}
}


void	getPairValue(std::vector<std::pair<std::string, std::string> >& holder, std::string value)
{
	int i;
	int j;
	int size;
	std::pair<std::string , std::string> pr;
	size = value.size();
	while (i < size && (value[i] == ' ' || value[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size && value[i + j] != ' ' && value[i + j] != '\t')
		j++;
	if (j)
		pr.first.assign(value.substr(i, j));
	i = i + j;
	while (i < size && (value[i] == ' ' || value[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size && value[i + j] != ' ' && value[i + j] != '\t')
		j++;
	if (j)
		pr.second.assign( value.substr(i, j));
	holder.push_back(pr);
}


void	fillServerBlock(struct webserv& web, std::vector<std::string> serv)
{
	int 					i;
	int 					size;
	struct serverfile		conf;
	size = serv.size();
	i = 0;	
	while (i < size)
	{
		std::string		key;
		std::string		value;

		getKeyandValue(key, value, serv[i]);
		if (key == "listen")
		{
			conf.listen.push_back(value);
		}
		if (key == "servername")
		{
			getMultivalue(conf.server_name, value);
		}
		if (key == "error_page")
		{
			getPairValue(conf.error_page, value);
		}
		if (key == "client_max_body_size")
		{
			conf.max_body_size.assign(value);
		}
		if (key == "root")
		{
			conf.root.assign(value);
		}
		if (key == "index")
		{
			conf.index.assign(value);
		}
		if (key == "location")
		{
			struct location loc;
			while (i < size && isBracket(serv[i]) != 2)
			{
				if (key == "location")
					loc.pattern.assign(value);
				if (key == "root")
					loc.root.assign(value);
				if (key == "cgi")
					loc.cgi_ext.assign(value);
				if (key == "script_filename")
					loc.cgi_path.assign(value);
				if (key == "upload")
					loc.upload.assign(value);
				if (key == "upload_store")
					loc.upload_store.assign(value);
				if (key == "error_page")
					getPairValue(loc.error_page, value);
				if (key == "index")
					loc.index.assign(value);
				if (key == "autoindex")
					loc.autoindex.assign(value);
				if (key == "allow")
					getMultivalue(loc.allow, value);
				i++;
				key.assign("");
				value.assign("");
				getKeyandValue(key, value, serv[i]);
			}
			conf.location.push_back(loc);
		}
		i++;
	}
	web.config.push_back(conf);
}

void	getConfigData(struct webserv& web, std::vector<std::string> file)
{
	int i;
	int j;
	int k;
	int flag;
	int size;
	int valid;
	std::string	key;

	
	size = file.size();
	i = 0;
	k = 0;
	while (i < size)
	{
		if (isServerBlock(file[i]))
		{
			k++;
			std::vector<std::string> serv;
			serv.push_back(file[i]);
			i++;
			valid = 1;
			while (i < size && !isServerBlock(file[i]))
			{
				if (isBracket(file[i]) == 0)
				{
					key = getDirectiveKey(file[i]);
					flag = 0;
					j = 0;
					while (j < 13)
					{
						if (key.compare(0, key.size(), directives[j]) == 0)
							flag = 1;
						j++;
					}
					if (flag == 0)
					{
						std::cerr << "Error : unvalide Directive key [" << key;
					   	std::cerr << "] in server nbr : " << k << std::endl;
						valid = 0;
					}
				}
				serv.push_back(file[i++]);
			}
			if (valid)
				fillServerBlock(web, serv);
		}
		else
			i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parseConfigFun2.cpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/20 12:46:10 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/29 21:11:41 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"


void	moveBracketsToNextLine(std::vector<std::string>& file)
{
	int	i;
	int	size;
	int	tab;
	std::vector<std::string>::iterator it;

	//first part is to move open curly bracket in
	//server and location blocks to a new line
	it = file.begin();
	size = file.size();
	tab = 0;
	i = 0;
	while (i < size)
	{
		if ((tab = isaBlockWithOpenBrackets(file[i])))
		{
			//move it to the next line;
			if (tab > 0)
			{
				file.insert(it + i + 1, "{");
				if ((file[i].substr(tab + 1, file[i].size() - tab)).size())
					file.insert(it + i + 2, file[i].substr(tab + 1, file[i].size() - tab));
				file[i].assign(file[i].substr(0, tab));
			}
			else
			{
				tab = tab * - 1;
				file.insert(it + i + 1, "\t{");
				if ((file[i].substr(tab + 1, file[i].size() - tab)).size())
					file.insert(it + i + 2, file[i].substr(tab + 1, file[i].size() - tab));
				file[i].assign(file[i].substr(0, tab));
			}
			size = file.size();
			it = file.begin();
		}
		i++;
	}
	//secound part is to move close curly brackets in
	//the ends of directive value to a new line
	it = file.begin();
	size = file.size();
	i = 0;
	while (i < size)
	{
		tab = 0;
		int find = file[i].find("}");
		if (find  >= 0)
		{
			tab = isDirectiveWithCloseBrackets(file[i]);
			if (tab == 1)
			{
				file[i].assign(file[i].substr(0, find));
				file.insert(it + i + 1, "\t}");
			}
			else if (tab == 2)
			{
				file.insert(it + i + 1, file[i].substr(find + 1, file[i].size() - find));
				file[i].assign("}");
			}	
			else if (tab == 3)
			{
				file.insert(it + i + 1, "\t}");
				size = file.size();
				it = file.begin();
				file.insert(it + i + 2, file[i].substr(find + 1, file[i].size() - find));
				file[i].assign(file[i].substr(0, find));
				
			}
			size = file.size();
			it = file.begin();
		}
		i++;
	}
}

//check if server or location blocks are in the same line with curly brackets
int	isaBlockWithOpenBrackets(std::string& line)
{
	int	i;
	int	size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line.compare(i, 6, "server") == 0)
	{
		i = i + 6;
		if (line[i] == 0)
			return (0);
		while (i < size && line[i] != '{')
				i++;
		if (line[i] == '{')
				return (i);
		return  (0);
	}
	if (line.compare(i, 8, "location") == 0)
	{
		i = size - 1;
		while (i > 0 && line[i] != '{')
			i--;
		if (line[i] == '{')
			return (i * -1);
		return  (0);
	}
	return  (0);
}

//ckeck if close curly bracket is alone in a line 
//return 0 alone 
//return 1 data before curly bracket
//return 2 data after curly bracket
//return 3 data before and after curly bracket
int	isDirectiveWithCloseBrackets(std::string& line)
{
	int	i;
	int	size;
	int find;
	int	flag;

	size = line.size();
	flag = 0;
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line[i] != '}')
		flag = 1;
	while (i < size && line[i] != '}')
		i++;
	if (line[i] == '}')
		i++;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i == size)
		return (flag);
	if (i != size)
	{
		if (flag)
			flag = 3;
		else
			flag = 2;
	}	
	return (flag);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parseConfigFile.cpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/17 16:43:10 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/04/03 00:54:20 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"


int	parseConfigData(std::vector<std::string>& file)
{
	removeEmptyLineAndComments(file);//remove empty lines and comment from config file
	moveBracketsToNextLine(file);//only brackets thats come after server or location block
	splitSemiColons(file);//if there is multiple directive in the same line move it to next one
	removeEmptySemiColons(file);// remove lines that have only semi colons
	if (valideServersBlock(file) == 0)	//check also that there is no data outside servers 
	{
		std::cerr << "Data outside server block:" << std::endl;
		return (1);
	}
	return (0);
}

void	parseConfigFile(struct webserv& web, int ac, char **av)
{
	std::ifstream				file;
	const char 					*filename;
	std::string					line;
	std::vector<std::string>	conf_file;//fill in with line from server.conf
	int ports;
	int i;

	if (ac == 2)
		filename = av[1];
	else
		filename = CONFIGFILE;
	file.open(filename);
	if (file.is_open() == false)
	{
		std::cerr << "Error opening config file" << std::endl;
		web.status = 1;
		return ;
	}
	while (getline(file, line))
	{
		conf_file.push_back(line);
	}
	file.close();
	if (conf_file.size() == 0)
	{
		std::cerr << "Error Empty file" << std::endl;
		web.status = 1;
		return ;
	}
	if (parseConfigData(conf_file))
	{
		std::cerr << "Error in config file" << std::endl;
		web.status = 1;
		return;
	}
	getConfigData(web, conf_file);
	checkConfigData(web);
	ports = 0;
	i = 0;
	while (i < web.config.size())
	{
		ports = ports + web.config[i].listen.size();
		i++;
	}
	if (ports == 0)
		web.status = 1;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parseConfigFun1.cpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/20 11:40:24 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/29 21:21:46 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"


//check if a line have only whitespace characters return (0) if yes otherwise return (1)
int	isEmptyLines(std::string line)
{
	int	i;
	int size;

	size = line.size();
	i = 0;
	if (size == 0)
		return (0);
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i == size)
		return (0);
	return (1);
}



//check if the line start with # so its a comment that will be removed
int	isComment(std::string line)
{
	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
	i++;
	if (line[i] == '#')
		return (1);
	return (0);
}

//check if a line starts with "server" so it will consider as start of server block
int	isServerBlock(std::string line)
{
	int find;
	int	i;

	find = line.find("server");
	if (find >= 0)
	{
		i = find + 6;//Index of the character after server word in the string
		if (find == 0 && (line[i] == ' ' || line[i] == '\t' || line[i] == 0 ))
			return (1);
		if (find > 0)
		{
			if ((line[find - 1] == ' ' || line[find - 1] == '\t') 
					&& (line[i] == ' ' || line[i] == '\t' || line[i] == 0))
				return (1);
		}
	}
	return (0);

/*	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line.compare(i, 6, "server") == 0)
	{
		if (line[i + 6] == ' ' || line[i + 6] == '\t' || line[i + 6] == 0)
			return (1);
	}
	return (0);*/
}
// check if a line starts with loaction block so its the start of locaion block
int	isLocationBlock(std::string line)
{
	int find;
	int	i;

	find = line.find("location");
	if (find >= 0)
	{
		i = find + 8;//Index of the character after server word in the string
		if (find == 0 && (line[i] == ' ' || line[i] == '\t' || line[i] == 0 ))
			return (1);
		if (find > 0)
		{
			if ((line[find - 1] == ' ' || line[find - 1] == '\t') 
					&& (line[i] == ' ' || line[i] == '\t' || line[i] == 0))
				return (1);
		}
	}
	return (0);

/*	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line.compare(i, 8, "location") == 0)
	{
		if (line[i + 8] == ' ' || line[i + 6] == '\t')
			return (1);
	}
	return (0);
	*/

}
//check if a line start with open or close curly brackets return (1) open return (2) close
int	isBracket(std::string line)
{
	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line[i] == '{')
		return (1);
	if (line[i] == '}')
		return (2);
	return (0);

}

int	endsWithSemiColon(std::string line)
{
	int size;

	size = line.size() - 1;
	while (size >= 0 && (line[size] == ' ' || line[size] == '\t'))
		size--;
	if (line[size] == ';')
		return (1);
	return (0);
}
void	countServerBlock(std::vector<std::string> file, int& nbr_of_server)
{
	int 		i;
	int			size;

	size = file.size();
	i = 0;
	while (i < size)
	{
		if (isServerBlock(file[i]))
			nbr_of_server++;
		i++;
	}
}

int	nbrOfLocBlock(std::vector<std::string> file)
{
	int i;
	int	size;
	int count;

	size = file.size();
	i = 0;
	count = 0;
	while (i < size)
	{
		if (isLocationBlock(file[i]))
			count++;
		i++;
	}
	return (count);
}


int	closedBlock(std::vector<std::string> file)
{
	int i;
	int size;
	int	flag;
	int	nbr_of_loc_block;

	nbr_of_loc_block = 0;
	size = file.size();
	flag = 0;
	if (size > 3 && isServerBlock(file[0]) && isBracket(file[1]) == 1 && isBracket(file[size - 1]) == 2)
	{
		nbr_of_loc_block = nbrOfLocBlock(file);
		i = 0;
		while (i < size)
		{
			if (isLocationBlock(file[i]))
			{
				std::vector<std::string> loc;
				int k = i;
				while (k < size && isBracket(file[k]) != 2)
				{
					loc.push_back(file[k]);
					k++;
				}
				loc.push_back(file[k]);
				if (loc.size() > 3 && isBracket(loc[1]) == 1 && isBracket(loc[loc.size() - 1]) == 2)
					flag++;
			}
			i++;
		}
		if (nbr_of_loc_block == flag)
			return (1);
		return (0);
	}
	else
		return (0);
}
void	removeEmptyLineAndComments(std::vector<std::string>& file)
{
	std::vector<std::string>::iterator 	it;
	int									index;

	index = 0;
	it = file.begin();
	while (index < file.size())
	{
		if (isEmptyLines(file[index]) == 0)
		{
			file.erase(it + index);
			it = file.begin();
			index--;
		}
		else if (isComment(file[index]))
		{
			file.erase(it + index);
			it = file.begin();
			index--;
		}
		index++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   splitSemiColons.cpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/21 11:48:44 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/29 21:58:05 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"

void	removeDoubleSemiColons(std::string& line)
{
	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size)
	{
		if (line[i] == ';')
		{
			int j = i + 1;
			while (j < size && (line[j] == ' ' || line[j] == '\t'))
				j++;
			if (j > i && line[j] == ';')
			{
				line[i] = ' ';
				i = -1;
			}
		}
		i++;
	}
}

void	splitSemiColons(std::vector<std::string>& file)
{
	int i;
	int size;
	int find;
	int	flag;
	std::vector<std::string>::iterator it;
	
	flag = 0;
	it = file.begin();
	size = file.size();
	i = 0;
	while (i < size)
	{
		removeDoubleSemiColons(file[i]);
		find = file[i].find(";");
		if (find >= 0)
		{
			flag = file[i].find("server");
			if (flag > 0 && (file[i][flag + 6] == ' ' || file[i][flag + 6] == '\t' || file[i][flag + 6] == 0))
				;
			else
			{	
				int len = file[i].size();
				int j = find + 1;
				while (j < len && file[i][j] == ' ' && file[i][j] == '\t')
					j++;
				if (j < len)
				{
					file.insert(it + i + 1, file[i].substr(find + 1, len - find - 1));
					file[i].assign(file[i].substr(0, find + 1));
					it = file.begin();
					size = file.size();
				}
			}
		}	
		i++;
	}
}




int	isAloneSemiColon(std::string  line)
{
	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line[i] == ';')
		i++;	
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i == size)
		return (1);
	return (0);
}


void	removeEmptySemiColons(std::vector<std::string>& file)
{
	int i;
	int size;
	std::vector<std::string>::iterator it;

	it = file.begin();
	size = file.size();
	i = 0;
	while (i < size)
	{
		if (isServerBlock(file[i]))
		{
			i++;
			while (i < size && !isServerBlock(file[i]))
			{
				if (isAloneSemiColon(file[i]))
				{
					file.erase(it + i);
					it = file.begin();
					size = file.size();
				}
				else
					i++;
			}
		}
		else
			i++;
	}
}





/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   valideServersBlock.cpp                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/28 21:13:07 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/29 00:33:55 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   valideServersBlock.cpp                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/22 16:30:09 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/28 21:12:59 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "webserv.hpp"

int	valideServerName(std::string line)
{
	int i;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line.compare(i, 6, "server") != 0)
		return (0);
	i = i + 6;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i != size)
		return (0);
	return (1);
}

int	isAclosedServer(std::vector<std::string> file, int line_index)
{
	int i;
	int	size;
	int open_bracket;

	i = line_index + 1;
	open_bracket = 1;
	while (i < size && open_bracket)
	{
		if (isBracket(file[i]) == 1)
			open_bracket++;
		else if (isBracket(file[i]) == 2)
			open_bracket--;
		else if (endsWithSemiColon(file[i]) == 0)
		   return (-1);	
		i++;
	}
	if (open_bracket != 0)
		return (-1);
	return (i);
}


int	valideServersBlock(std::vector<std::string> file)
{
	int i;
	int j;
	int	size;
	int open_brackets;

	open_brackets = 0;
	size = file.size();
	i = 0;
	while (i < size)
	{
		open_brackets = 0;
		if (valideServerName(file[i]))
		{
			i++;
			if (isBracket(file[i]) == 1)
				open_brackets = 1;
			else
				return (0);
			i++;
			while (i < size && isServerBlock(file[i]) == 0 && open_brackets)
			{
				int b = isBracket(file[i]);
				if (b == 1)
					open_brackets++;
				else if (b == 2)
					open_brackets--;
				else if (endsWithSemiColon(file[i]) == 0 && isLocationBlock(file[i]) == 0)
					return (0);
				i++;
			}
			if (open_brackets != 0)
				return (0);
		}
		else if (i < size && isEmptyLines(file[i]) != 0)
			return (0);
		else
			i++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   valides.cpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tel-bouh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/23 18:39:29 by tel-bouh          #+#    #+#             */
/*   Updated: 2023/03/31 00:08:19 by tel-bouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "webserv.hpp"

int getNbr(std::string line)
{
	int i;
	int size;
	int nbr;

	nbr = 0;
	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	while (i < size && line[i] >= '0' && line[i] <= '9')
	{
		nbr = nbr * 10;
		nbr = nbr + (line[i] - 48);
		i++;
	}
	return (nbr);
}

int	validePort(std::string line)
{
	int i;
	int size;
	int nbr;

	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	while (i < size && (line[i] >= '0' && line[i] <= '9'))
		i++;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (i != size)
		return (0);
	else
		nbr = getNbr(line);
	if (nbr >= 1024 && nbr <= 65535)
		return (1);
	return (0);
}

int	alphaDigit(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
		return (1);
	return (0);
}

int	valideDomainName(std::string line)
{
	int i;
	int size;

	i = 0;	
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (line[i] == 'w')
	{
		int j = i + 3;
		while (i < j && i < size && line[i] == 'w')
			i++;
		if (line[i] == '.')
			i++;
	}
	if (line[i] == '-')
		return (0);
	while (i < size && line[i] != '.' && (alphaDigit(line[i]) || line[i] == '-'))
		i++;
	if (line[i] != '.')
		return (0);
	if (line[i] == '.' && line[i - 1] == '-')
		return (0);
	i++;
	int j = 0;
	while (i < size && alphaDigit(line[i]))
	{
		i++;
		j++;
	}
	if (j >= 2)
	{
		std::cout << "Valide servername "<< std::endl;
		return (1);
	}
	return (0);

}


int	valideFile(std::string line)
{
	std::ifstream file;
	std::string nbr;
	std::string name;
	int i;
	int size;
	int j;

	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size && line[i + j] != ' ' && line[i + j] != '\t')
		j++;
	nbr = line.substr(i, j);
	i = i + j;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size && line[i + j] != ' ' && line[i + j] != '\t')
		j++;
	name = line.substr(i, j);
	i = 0;
	size = nbr.size();
	while (i < size && nbr[i] >= '0' && nbr[i] <= '9')
		i++;
	if (i != size)
		return (0);
	file.open(name.c_str());
	if (file.is_open())
	{
		std::cout << "File opened\n";
		file.close();
		return (1);
	}
	std::cout << "File not  opened\n";
	return (0);
}


int valideUnit(std::string line)
{
	int nbr;
	int i;
	int size;
	char unit;
	
	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	while (i < size && line[i] >= '0' && line[i] <= '9')
		i++;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (line[i] == 'G' || line[i] == 'M' || line[i] == 'K')
	{
		unit = line[i];
		i++;
	}
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (i != size)
		return (0);
	nbr = getNbr(line);
	if ((unit == 'G' || unit == 'K' || unit == 'M') && nbr > 0)
	{
		std::cout << "Valide Body size " << std::endl;
		return (1);
	}
	std::cout << "unvalide Body size " << std::endl;
	return 0;
}

int	valideOnOff(std::string line)
{
	int i;
	int size;

	i = 0;
	size = line.size();	
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (i + 2 > size)
		return (0);
	if (line.compare(i, 2, "on") == 0)
	{
		if (line[i + 2] == 0)
		{
			std::cout << "Valide on value" << std::endl;
			return (1);
		}
		i += 2;
		while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
		if (i == size)
		{
			std::cout << "Valide on value" << std::endl;
			return (1);
		}
		return (0);
	}	
	if (i + 3 > size)
		return (0);
	if (line.compare(i, 3, "off") == 0)
	{
		if (line[i + 3] == 0)
		{
			std::cout << "Valide off value" << std::endl;
			return (1);
		}
		i += 3;
		while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
		if (i == size)
		{
			std::cout << "Valide off value" << std::endl;
			return (1);
		}
		return (0);
	}	
	std::cout << "Unvalide on/off value" << std::endl;
	return (0);
}

int	valideExtension(std::string line)
{
	int i;
	int j;
	int size;

	size = line.size();
	i = 0;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (i < size &&  line[i] == '.')
		i++;
	else
		return (0);
	j = 0;
	while (i + j < size && isalpha(line[i + j]))
		j++;
	if (j == 0)
		return (0);
	i = i + j;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
			i++;
	if (i == size)
	{
		std::cout << "Valide extension" << std::endl;
		return (1);
	}
	return (0);
}

int	valideScript(std::string line)
{
	int i;
	int j;
	int size;
	std::string name;

	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = 0;	
	while (i + j < size && line[i + j] != ' ' && line[i + j] != '\t')
		j++;
	if (j == 0)
		return (0);
	name = line.substr(i, j);
	i = i + j;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i != size)
		return (0);
	j = access(name.c_str(), X_OK);
	if (j == 0)
	{
		std::cout << "Valide excutable" << std::endl;
		return (1);
	}
	return (0);
}

int	validePath(std::string line)
{
	int i;
	int j;
	int size;
	std::string path;
	struct stat buffer;

	i = 0;
	size = line.size();
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	j = 0;
	while (i + j < size && line[i + j] != ' ' && line[i + j] != '\t')
		j++;
	if (j == 0)
		return (0);
	path = line.substr(i, j);
	i = i + j;
	while (i < size && (line[i] == ' ' || line[i] == '\t'))
		i++;
	if (i != size)
		return (0);
	j = stat(path.c_str(), &buffer);
	if (j == 0)
	{
		if (S_ISDIR(buffer.st_mode))
		{
			std::cout << "Valide directory path" << std::endl;
			return (1);
		}
		return (0);
	}
	else
		return (0);
}
